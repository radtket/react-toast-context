{"version":3,"sources":["contexts/context.js","hooks/useToastContext.js","toasts/Home.js","contexts/types.js","toasts/Info.js","toasts/Danger.js","toasts/CutomHTML.js","App.js","serviceWorker.js","components/Toast.js","contexts/reducer.js","contexts/provider.js","index.js"],"names":["createContext","useToastContext","useContext","ToastContext","Home","toastDispatch","React","createElement","onClick","type","payload","content","sucess","message","Info","Danger","CutomHTML","App","toast","className","Router","Link","to","Switch","Route","exact","path","length","Boolean","window","location","hostname","match","Toast","_ref","map","_ref2","id","key","concat","aria-label","role","JSON","stringify","renderItem","state","Date","filter","t","children","useReducer","toastReducer","Provider","value","createPortal","document","body","ReactDOM","render","StrictMode","ToastProvider","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.db024ac2.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport default createContext();\n","import { useContext } from \"react\";\nimport ToastContext from \"../contexts/context\";\n\nconst useToastContext = () => {\n  return useContext(ToastContext);\n};\n\nexport default useToastContext;\n","import React from \"react\";\nimport { ADD } from \"../contexts/types\";\nimport useToastContext from \"../hooks/useToastContext\";\n\nconst Home = () => {\n  const { toastDispatch } = useToastContext();\n  return (\n    <div>\n      <button\n        onClick={() =>\n          toastDispatch({\n            type: ADD,\n            payload: {\n              content: { sucess: \"OK\", message: \"Hello World\" },\n            },\n          })\n        }\n        type=\"button\"\n      >\n        Show basic notification\n      </button>\n    </div>\n  );\n};\n\nexport default Home;\n","export const ADD = \"ADD\";\nexport const REMOVE = \"REMOVE\";\nexport const REMOVE_ALL = \"REMOVE_ALL\";\n","import React from \"react\";\nimport { ADD } from \"../contexts/types\";\nimport useToastContext from \"../hooks/useToastContext\";\n\nconst Info = () => {\n  const { toastDispatch } = useToastContext();\n  return (\n    <div>\n      <button\n        onClick={() =>\n          toastDispatch({\n            type: ADD,\n            payload: {\n              content: { sucess: \"OK\", message: \"Info message\" },\n              type: \"info\",\n            },\n          })\n        }\n        type=\"button\"\n      >\n        Show Info notification\n      </button>\n    </div>\n  );\n};\n\nexport default Info;\n","import React from \"react\";\nimport { ADD } from \"../contexts/types\";\nimport useToastContext from \"../hooks/useToastContext\";\n\nconst Danger = () => {\n  const { toastDispatch } = useToastContext();\n  return (\n    <div>\n      <button\n        onClick={() =>\n          toastDispatch({\n            type: ADD,\n            payload: {\n              content: { sucess: \"FAIL\", message: \"Something nasty!\" },\n              type: \"danger\",\n            },\n          })\n        }\n        type=\"button\"\n      >\n        Show danger notification\n      </button>\n    </div>\n  );\n};\n\nexport default Danger;\n","import React from \"react\";\nimport { ADD } from \"../contexts/types\";\nimport useToastContext from \"../hooks/useToastContext\";\n\nconst CutomHTML = () => {\n  const { toastDispatch } = useToastContext();\n  return (\n    <div>\n      <button\n        onClick={() =>\n          toastDispatch({\n            type: ADD,\n            payload: {\n              content: () => {\n                return (\n                  <div>\n                    <h4>Error</h4>\n                    <p>Something nasty happened!!</p>\n                  </div>\n                );\n              },\n              type: \"danger\",\n            },\n          })\n        }\n        type=\"button\"\n      >\n        Show danger notification with custom HTML\n      </button>\n    </div>\n  );\n};\n\nexport default CutomHTML;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport { REMOVE_ALL } from \"./contexts/types\";\nimport Home from \"./toasts/Home\";\nimport Info from \"./toasts/Info\";\nimport Danger from \"./toasts/Danger\";\nimport CutomHTML from \"./toasts/CutomHTML\";\nimport useToastContext from \"./hooks/useToastContext\";\n\nconst App = () => {\n  const { toast, toastDispatch } = useToastContext();\n  return (\n    <div className=\"App\">\n      <Router>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/info\">Info</Link>\n          </li>\n          <li>\n            <Link to=\"/danger\">Danger</Link>\n          </li>\n          <li>\n            <Link to=\"/custom-html\">Custom HTML</Link>\n          </li>\n        </ul>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/info\">\n            <Info />\n          </Route>\n          <Route exact path=\"/danger\">\n            <Danger />\n          </Route>\n          <Route exact path=\"/custom-html\">\n            <CutomHTML />\n          </Route>\n        </Switch>\n      </Router>\n      <br />\n      {toast.length && (\n        <button\n          onClick={() =>\n            toastDispatch({\n              type: REMOVE_ALL,\n            })\n          }\n          type=\"button\"\n        >\n          Clear all notifications\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nimport { REMOVE } from \"../contexts/types\";\nimport useToastContext from \"../hooks/useToastContext\";\nimport \"../styles/toast.scss\";\n\nconst Toast = ({ toast }) => {\n  const { toastDispatch } = useToastContext();\n\n  const renderItem = (content) => {\n    if (typeof content === \"function\") {\n      return content();\n    }\n    return <pre>{JSON.stringify(content, null, 2)}</pre>;\n  };\n\n  return (\n    <div className=\"toast\">\n      <div className=\"toast-container\">\n        {toast.map(({ id, type, content}) => {\n          return (\n            <div\n              key={id}\n              className={`toast-container-item ${type ? type : \"\"}`}\n            >\n              <span\n                aria-label=\"close toast\"\n                className=\"toast-close\"\n                onClick={() =>\n                  toastDispatch({ type: REMOVE, payload: { id } })\n                }\n                role=\"img\"\n              >\n                &times;\n              </span>\n              {renderItem(content)}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Toast;\n","import { ADD, REMOVE, REMOVE_ALL } from \"./types\";\n\nexport default (state, { type, payload }) => {\n  switch (type) {\n    case ADD:\n      return [\n        ...state,\n        {\n          id: +new Date(),\n          content: payload.content,\n          type: payload.type,\n        },\n      ];\n    case REMOVE:\n      return state.filter((t) => t.id !== payload.id);\n    case REMOVE_ALL:\n      return [];\n    default:\n      return state;\n  }\n};\n","import React, { useReducer } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport Toast from \"../components/Toast\";\nimport ToastContext from \"./context\";\nimport toastReducer from \"./reducer\";\n\nexport default ({ children }) => {\n  const [toast, toastDispatch] = useReducer(toastReducer, []);\n\n  return (\n    <ToastContext.Provider value={{ toast, toastDispatch }}>\n      {children}\n      {createPortal(<Toast toast={toast} />, document.body)}\n    </ToastContext.Provider>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ToastProvider from \"./contexts/provider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToastProvider>\n      <App />\n    </ToastProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}